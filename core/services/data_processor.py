import time
import traceback
from core.data_models.employer import Employer
from core.data_models.vacancy import Vacancy
from core.database.db_manager import DBManager
from core.services.api import HeadHunterAPI


class DataProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö: API ‚Üí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, db_name: str = "career_db"):
        self.api = HeadHunterAPI()
        self.db_name = db_name
        self.vacancies_per_employer = 20

    def load_by_names(self, company_names: list) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫—É –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π"""
        if not self.api.test_connection():
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API HeadHunter")
            return False

        try:
            db = DBManager(self.db_name)
            if not db.connect():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            for name in company_names:
                print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {name}")

                # –ü–æ–∏—Å–∫ ID –∫–æ–º–ø–∞–Ω–∏–∏
                employer_id = self.api.get_employer_id_by_name(name)
                if not employer_id:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {name}")
                    continue
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID –∫–æ–º–ø–∞–Ω–∏–∏: {employer_id}")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
                employer_info = self.api.get_employer_info(employer_id)
                if not employer_info:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏: {name} ({employer_id})")
                    continue
                print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏: {employer_info.get('name')}")

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
                employer = Employer.from_api_response(employer_info)
                if not db.save_employer(employer):
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: {name}")
                    continue
                print(f"üíæ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {employer.name}")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
                vacancies_data = self.api.get_vacancies_by_employer_id(
                    employer_id, per_page=self.vacancies_per_employer
                )
                print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies_data)}")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
                saved_count = 0
                for vacancy_data in vacancies_data:
                    vacancy = Vacancy.from_api_response(vacancy_data)
                    if db.save_vacancy(vacancy):
                        saved_count += 1

                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {saved_count}/{len(vacancies_data)}")
                time.sleep(0.5)

            return True
        except Exception as e:
            print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ DataProcessor: {e}")
            traceback.print_exc()
            return False
        finally:
            if db:
                db.disconnect()

    def load_by_ids(self, employer_ids: list) -> bool | None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫—É ID –∫–æ–º–ø–∞–Ω–∏–π"""
        if not self.api.test_connection():
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
            return False

        try:
            db = DBManager(self.db_name)
            if not db.connect():
                print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return False

            for employer_id in employer_ids:
                print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID: {employer_id}")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
                employer_info = self.api.get_employer_info(employer_id)
                if not employer_info:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID: {employer_id}")
                    continue

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
                employer = Employer.from_api_response(employer_info)
                if not db.save_employer(employer):
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: {employer.name} ({employer_id})")
                    continue
                print(f"üíæ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {employer.name}")

                # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                vacancies_data = self.api.get_vacancies_by_employer_id(
                    employer_id, per_page=self.vacancies_per_employer
                )
                print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies_data)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
                saved_count = 0
                for vacancy_data in vacancies_data:
                    vacancy = Vacancy.from_api_response(vacancy_data)
                    if db.save_vacancy(vacancy):
                        saved_count += 1

                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {saved_count}/{len(vacancies_data)}")
                time.sleep(0.5)

            return True
        except Exception as e:
            print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            traceback.print_exc()
            return False
        finally:
            if db:
                db.disconnect()
